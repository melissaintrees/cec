{"version":3,"sources":["assets/javascript/app.js"],"names":["$","document","ready","addResultsToPage","r","initMap","centerMap","lat","location","coordinates","lng","console","log","map","google","maps","Map","getElementById","zoom","center","Marker","position","pass","fail","i","length","result","results","includes","passTableRow","tableData1","tableData2","tableData3","tableData4","text","moment","inspection_date","format","inspection_type","passTableBody","append","aka_name","failTableRow","failTableBody","violations","show","modal","parallax","hide","on","restaurantName","val","trim","validateInput","Materialize","toast","empty","chicagoCall","currentMoment","queryURL","finalURL","getJSON","lengthCheck","licenseArray","multiRestaurantArray","license_","push","license","address","name","dba_name","latitude","longitude","zip","html","userPickRestaurant","multipleLocationsModal","link","addClass","attr","licenseSelection","selectedResponse"],"mappings":"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","file":"app.e54729b5.js","sourceRoot":"..","sourcesContent":["import '../css/style.css';\n\n$(document).ready(function () {\n    // https://momentjscom.readthedocs.io/en/latest/moment/04-displaying/01-format/\n\n    // Needs to be global for use in google places fxn\n    var restaurantNameGlobal = \"\";\n    // Modal function needed by Materialize\n    $('.modal').modal();\n    $(\"#modal2\").modal(\"open\");\n\n    // Parallex call needed by Materialize\n    $('.parallax').parallax();\n\n\n    // $('.tap-target').tapTarget(\"open\");\n    // Prints default page to screen on page load\n    function defaultPage() {\n        $(\".resultsDiv\").hide();\n    };\n    defaultPage();\n    // Function run when the user hits submit\n    $(\"#submitBtn\").on(\"click\", function () {\n        var restaurantName = $(\"#rest-search-input\").val().trim();\n        restaurantNameGlobal = restaurantName;\n        // Validate Input\n        validateInput(restaurantName);\n    });\n    // Function validates user input and if valid, calls Fxn to run API, else prompts user to retry\n    function validateInput(restaurantName) {\n        if (restaurantName == \"\") {\n            Materialize.toast(\"Please enter a Restaurant Name!\", 4000);\n        } else {\n            // Empty Search Fields and Results for next search\n            $(\"#passTableBody\").empty();\n            $(\"#failTableBody\").empty();\n            $(\"#rest-search-input\").val(\"\");\n            chicagoCall(restaurantName);\n        };\n    };\n    // Call City of Chicago Health Data API\n    function chicagoCall(restaurantName) {\n        var currentMoment = moment().format(\"YYYY-MM-DD\" + \"T\" + \"hh:mm:ss\")\n        var baseURL = 'https://data.cityofchicago.org/resource/cwig-ma7x.json';\n        var queryURL = '?$where=inspection_date between \"2016-01-01T12:00:00\" and \"' + currentMoment + '\"' +\n            ' and starts_with(dba_name, upper(\"' +\n            restaurantName +\n            '\"))';\n        console.log(queryURL);\n        var finalURL = baseURL + queryURL;\n        $.getJSON(finalURL, function (r) {\n            // Check # of restaurants returned\n            lengthCheck(r);\n        });\n    };\n    // This function checks how many restaurants are returned by the City API, if there are multiple, it prompts\n    // the user to select the restaurant they want. \n    function lengthCheck(r) {\n        // If JSON object is empty, no restaurants were found\n        if (r.length == 0) {\n            Materialize.toast(\"No Restaurants by that name were found in that area!\", 4000);\n        }\n        // If JSON object is not empty, find out how many unique restaurants are in the response.\n        else {\n            var licenseArray = [];\n            var multiRestaurantArray = [];\n            for (var i = 0; i < r.length; i++) {\n                if (!licenseArray.includes(r[i].license_)) {\n                    licenseArray.push(r[i].license_);\n                    multiRestaurantArray.push({\n                        license: r[i].license_,\n                        address: r[i].address,\n                        name: r[i].dba_name,\n                        latitude: r[i].latitude,\n                        longitude: r[i].longitude,\n                        zip: r[i].zip\n                    });\n                };\n            };\n            if (licenseArray.length == 1) {\n                addResultsToPage(r);\n            } else if (licenseArray.length > 1) {\n                $(\"#multipleLocationsModal\").html(\"\");\n                userPickRestaurant(multiRestaurantArray, r);\n            };\n        };\n    };\n    // Function which prints multiple restaurants to the page and allows user to choose\n    function userPickRestaurant(multiRestaurantArray, r) {\n        var multipleLocationsModal = $(\"#multipleLocationsModal\");\n        for (var i = 0; i < multiRestaurantArray.length; i++) {\n            var link = $(\"<a>\");\n            link.text(multiRestaurantArray[i].address);\n            link.addClass(\"collection-item collection-item2 multipleResults\");\n            link.attr(\"data-license\", multiRestaurantArray[i].license);\n            multipleLocationsModal.append(link);\n            $(\"#modal1\").modal('open');\n        };\n        // On click listener\n        $(\".multipleResults\").on(\"click\", function () {\n            var licenseSelection = $(this).attr(\"data-license\");\n            var selectedResponse = [];\n            for (var i = 0; i < r.length; i++) {\n                if (licenseSelection == r[i].license_) {\n                    selectedResponse.push(r[i]);\n                };\n            };\n            $(\"#modal1\").modal('close');\n            addResultsToPage(selectedResponse);\n        });\n    };\n    // Function prints results to page after all validation and checking.\n    function addResultsToPage(r) {\n        initMap(r);\n        // placeID(r);\n        var pass = 0;\n        var fail = 0;\n        console.log(r);\n        for (var i = 0; i < r.length; i++) {\n            var result = r[i].results;\n            if (result.includes(\"Pass\")) {\n                pass++\n                var passTableRow = $(\"<tr>\");\n                var tableData1 = $(\"<td>\");\n                var tableData2 = $(\"<td>\");\n                var tableData3 = $(\"<td>\");\n                var tableData4 = $('<td>');\n                tableData1.text(moment(r[i].inspection_date).format(\"MM-DD-YYYY\"));\n                tableData2.text(r[i].results);\n                tableData3.text(r[i].inspection_type);\n                // Instead of displaying the violation, reward Restaurants' passed inspections by hiding the inspection data.\n                // tableData4.text(r[i].violations);\n                // if they passed with \"pass\" they get a two clean thumbs up\n                if (r[i].results === \"Pass\") {\n                    tableData4.text(\"Two Clean Thumbs Up!\")\n                } else {\n                    // if they passed with \"pass with conditions\" they get a \"One Clean Thumb Up\"\n                    tableData4.text(\"One Clean Thumb Up!\")\n                }\n\n                var passTableBody = $(\"#passTableBody\");\n                passTableRow.append(tableData1, tableData2, tableData3, tableData4);\n                passTableBody.append(passTableRow);\n                // display the DBA name for the header of the map. \n                $(\"#rName\").text(r[i].aka_name);\n            } else if (result.includes(\"Fail\")) {\n                fail++;\n                console.log(fail);\n                var failTableRow = $(\"<tr>\");\n                var failTableBody = $(\"#failTableBody\");\n                var tableData1 = $(\"<td>\");\n                var tableData2 = $(\"<td>\");\n                var tableData3 = $(\"<td>\");\n                var tableData4 = $('<td class=\"tst\">');\n                tableData1.text(moment(r[i].inspection_date).format(\"MM-DD-YYYY\"));\n                tableData2.text(r[i].results);\n                tableData3.text(r[i].inspection_type);\n                tableData4.text(r[i].violations);\n                failTableRow.append(tableData1, tableData2, tableData3, tableData4);\n                failTableBody.append(failTableRow);\n            } else {\n                console.log(\"There has been an error with this restaurant\");\n            };\n        };\n        $(\"#totalPass\").text(pass);\n        $(\"#totalFail\").text(fail);\n        $(\".resultsDiv\").show();\n\n    };\n    // Function prints map to page\n    function initMap(r) {\n        let centerMap = {\n            lat: r[0].location.coordinates[0],\n            lng: r[0].location.coordinates[1]\n        };\n        console.log(centerMap)\n\n\n        var map = new google.maps.Map(document.getElementById('map'), {\n            zoom: 15,\n            center: centerMap\n        });\n        var marker = new google.maps.Marker({\n            position: centerMap,\n            map: map\n        });\n\n    };\n\n\n});\n"]}